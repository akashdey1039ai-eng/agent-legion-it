import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface AnalysisResult {
  leadScore: number;
  priorityLevel: 'High' | 'Medium' | 'Low';
  keyInsights: string[];
  recommendedActions: string[];
  riskFactors: string[];
  opportunityAssessment: {
    revenuePotential: string;
    timeline: string;
    confidence: 'High' | 'Medium' | 'Low';
  };
  summary: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ HubSpot Export Function Started...');
    
    const { leadData, analysis, platform } = await req.json() as {
      leadData: any;
      analysis: AnalysisResult;
      platform: string;
    };

    console.log('üìä Processing export for lead:', leadData?.first_name, leadData?.last_name);

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get the auth header to verify the user
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    
    console.log('üîê Verifying user authentication');
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    if (userError || !user) {
      console.error('‚ùå Authentication failed:', userError);
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const userId = user.id;
    console.log(`‚úÖ User authenticated: ${userId}`);

    // Get HubSpot tokens
    console.log('üîë Fetching HubSpot tokens');
    const { data: tokenData, error: tokenError } = await supabase
      .from('hubspot_tokens')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (tokenError || !tokenData) {
      console.error('‚ùå No HubSpot tokens found for user:', userId, tokenError);
      return new Response(JSON.stringify({ error: 'HubSpot not connected' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Check if token is expired
    if (new Date(tokenData.expires_at) <= new Date()) {
      console.error('‚ùå HubSpot token expired for user:', userId);
      return new Response(JSON.stringify({ error: 'HubSpot token expired' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üì§ Starting export to HubSpot...');

    // Create analysis note content
    const noteContent = `
ü§ñ AI Lead Analysis Results
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä Lead Score: ${analysis.leadScore}/100
üéØ Priority: ${analysis.priorityLevel}
üí∞ Revenue Potential: ${analysis.opportunityAssessment.revenuePotential}
‚è±Ô∏è Timeline: ${analysis.opportunityAssessment.timeline}
üéØ Confidence: ${analysis.opportunityAssessment.confidence}

üìù Summary:
${analysis.summary}

üí° Key Insights:
${analysis.keyInsights.map((insight, i) => `${i + 1}. ${insight}`).join('\n')}

‚úÖ Recommended Actions:
${analysis.recommendedActions.map((action, i) => `${i + 1}. ${action}`).join('\n')}

${analysis.riskFactors.length > 0 ? `‚ö†Ô∏è Risk Factors:\n${analysis.riskFactors.map((risk, i) => `${i + 1}. ${risk}`).join('\n')}` : ''}

Generated by AI Lead Intelligence Agent
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    `.trim();

    // Find the contact in HubSpot by email
    if (!leadData.email) {
      return new Response(JSON.stringify({ error: 'Lead email is required for HubSpot export' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üîç Searching for contact in HubSpot by email:', leadData.email);

    // Search for contact by email
    const searchUrl = `https://api.hubapi.com/crm/v3/objects/contacts/search`;
    const searchResponse = await fetch(searchUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        filterGroups: [{
          filters: [{
            propertyName: 'email',
            operator: 'EQ',
            value: leadData.email
          }]
        }],
        properties: ['email', 'firstname', 'lastname', 'hubspot_owner_id'],
        limit: 1
      })
    });

    if (!searchResponse.ok) {
      const errorText = await searchResponse.text();
      console.error('‚ùå HubSpot search error:', errorText);
      throw new Error(`HubSpot search failed: ${searchResponse.status}`);
    }

    const searchData = await searchResponse.json();
    const contacts = searchData.results || [];

    if (contacts.length === 0) {
      console.log('‚ùå Contact not found in HubSpot with email:', leadData.email);
      return new Response(JSON.stringify({ error: 'Contact not found in HubSpot' }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const contact = contacts[0];
    console.log('‚úÖ Found contact in HubSpot:', contact.id);

    // Create a note/engagement in HubSpot
    const noteUrl = 'https://api.hubapi.com/crm/v3/objects/notes';
    const noteResponse = await fetch(noteUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        properties: {
          hs_note_body: noteContent,
          hs_timestamp: new Date().toISOString()
        },
        associations: [{
          to: { id: contact.id },
          types: [{
            associationCategory: 'HUBSPOT_DEFINED',
            associationTypeId: 202  // Note to Contact association
          }]
        }]
      })
    });

    if (!noteResponse.ok) {
      const errorText = await noteResponse.text();
      console.error('‚ùå HubSpot note creation error:', errorText);
      throw new Error(`Failed to create note in HubSpot: ${noteResponse.status}`);
    }

    const noteData = await noteResponse.json();
    console.log('‚úÖ Note created in HubSpot:', noteData.id);

    // Update contact with lead score
    const updateUrl = `https://api.hubapi.com/crm/v3/objects/contacts/${contact.id}`;
    const updateResponse = await fetch(updateUrl, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        properties: {
          hubspotscore: analysis.leadScore,
          lead_status: analysis.priorityLevel.toLowerCase(),
          notes_last_updated: new Date().toISOString()
        }
      })
    });

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      console.error('‚ö†Ô∏è HubSpot contact update warning (note still created):', errorText);
      // Don't fail the whole operation if contact update fails
    } else {
      console.log('‚úÖ Contact updated with lead score');
    }

    console.log('üéâ Export to HubSpot completed successfully');

    return new Response(JSON.stringify({
      success: true,
      message: 'Analysis exported to HubSpot successfully',
      noteId: noteData.id,
      contactId: contact.id
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå HubSpot export error:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});